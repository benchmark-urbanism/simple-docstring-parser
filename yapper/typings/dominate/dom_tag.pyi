"""
This type stub file was generated by pyright.
"""

__license__ = ...

class dom_tag:
    is_single = ...
    is_pretty = ...
    is_inline = ...
    def __new__(
        _cls, *args, **kwargs
    ):  # -> ((*args: Unknown, **kwargs: Unknown) -> (Unknown | dom_tag)) | Self@dom_tag:
        """
        Check if bare tag is being"""
        ...
    def __init__(self, *args, **kwargs) -> None:
        """
        Creates a new tag. Child ta"""
        ...
    frame = ...
    _with_contexts = ...
    def __enter__(self): ...
    def __exit__(self, type, value, traceback): ...
    def __call__(self, func):  # -> (*args: Unknown, **kwargs: Unknown) -> (Unknown | Self@dom_tag):
        """
        tag instance is being used"""
        ...
    def set_attribute(self, key, value):  # -> None:
        """
        Add or update the value of"""
        ...
    __setitem__ = ...
    def delete_attribute(self, key): ...

    __delitem__ = ...
    def setdocument(self, doc):  # -> None:
        """
        Creates a reference to the"""
        ...
    def add(self, *args):  # -> tuple[Unknown, ...]:
        """
        Add new child tags.
        """
        ...
    def add_raw_string(self, s): ...
    def remove(self, obj): ...
    def clear(self): ...
    def get(self, tag=..., **kwargs):
        """
        Recursively searches childr"""
        ...
    def __getitem__(self, key):  # -> Any:
        """
        Returns the stored value of"""
        ...
    __getattr__ = ...
    def __len__(self):  # -> int:
        """
        Number of child elements.
        """
        ...
    def __bool__(self):  # -> Literal[True]:
        """
        Hack for "if x" and __len__"""
        ...
    __nonzero__ = ...
    def __iter__(self):  # -> Iterator[Unknown]:
        """
        Iterates over child element"""
        ...
    def __contains__(self, item):  # -> bool:
        """
        Checks recursively if item"""
        ...
    def __iadd__(self, obj):  # -> Self@dom_tag:
        """
        Reflexive binary addition s"""
        ...
    def __unicode__(self): ...

    __str__ = ...
    def render(self, indent=..., pretty=..., xhtml=...): ...
    def __repr__(self): ...
    @staticmethod
    def clean_attribute(attribute):  # -> str:
        """
        Normalize attribute names f"""
        ...
    @classmethod
    def clean_pair(cls, attribute, value):  # -> tuple[str | Unknown, str | Unknown]:
        """
        This will call `clean_attri"""
        ...

_get_current_none = ...

def get_current(default=...):  # -> object:
    """
    get the current tag being use"""
    ...

def attr(*args, **kwargs):  # -> None:
    """
    Set attributes on the current"""
    ...
